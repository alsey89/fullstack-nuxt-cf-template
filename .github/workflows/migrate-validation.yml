name: Migration Validation

on:
  pull_request:
    branches:
      - main  # Only run for PRs targeting main (production)
    paths:
      - 'server/database/migrations/**'
      - 'server/database/schema/**'
  workflow_dispatch:

jobs:
  validate-migrations:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Wrangler
        run: npm install -g wrangler

      - name: Authenticate Wrangler
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "$CLOUDFLARE_API_TOKEN" | wrangler login

      - name: Create test database
        id: test-db
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          DB_NAME="test-migration-${{ github.run_id }}"
          echo "db_name=$DB_NAME" >> $GITHUB_OUTPUT
          wrangler d1 create $DB_NAME

      - name: Apply migrations to test database
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          DB_NAME="${{ steps.test-db.outputs.db_name }}"

          # Apply all migrations
          wrangler d1 migrations apply $DB_NAME --remote

          echo "✅ Migrations applied successfully"

      - name: Run migration tests
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TEST_DB_NAME: ${{ steps.test-db.outputs.db_name }}
        run: |
          npm run test:migration

      - name: Validate schema integrity
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          DB_NAME="${{ steps.test-db.outputs.db_name }}"

          # Check critical tables exist
          wrangler d1 execute $DB_NAME --command="SELECT name FROM sqlite_master WHERE type='table'" --remote

          # Check for _migrations table
          MIGRATIONS_TABLE=$(wrangler d1 execute $DB_NAME --command="SELECT name FROM sqlite_master WHERE type='table' AND name='_migrations'" --remote)

          if [[ "$MIGRATIONS_TABLE" != *"_migrations"* ]]; then
            echo "❌ Migration tracking table not found"
            exit 1
          fi

          echo "✅ Schema validation passed"

      - name: Cleanup test database
        if: always()
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          DB_NAME="${{ steps.test-db.outputs.db_name }}"
          wrangler d1 delete $DB_NAME --skip-confirmation || true

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### 🚀 Production Migration Validation ✅

            - ✅ Test database created on Cloudflare D1
            - ✅ All migrations applied successfully
            - ✅ Schema integrity validated
            - ✅ Migration tests passed
            - ✅ Test database cleaned up

            **Test Database:** \`test-migration-${{ github.run_id }}\`

            **Ready for production deployment!** 🎯

            > This validation only runs for PRs targeting \`main\` branch (production).`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
